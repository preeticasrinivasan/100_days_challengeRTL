module OneBitComparator(
    input A,
    input B,
    output A_greater_B,
    output A_equal_B,
    output A_less_B
);
    // Logic for 1-bit comparator
    assign A_greater_B = (A & ~B);   // A > B
    assign A_equal_B = (A ~^ B);     // A == B (XNOR)
    assign A_less_B = (~A & B);      // A < B
endmodule

module TwoBitComparator(
    input [1:0] A,  // 2-bit input A (A1A0)
    input [1:0] B,  // 2-bit input B (B1B0)
    output A_greater_B,
    output A_equal_B,
    output A_less_B
);
    wire A1_greater_B1, A1_equal_B1, A1_less_B1;
    wire A0_greater_B0, A0_equal_B0, A0_less_B0;

    // Compare MSB (A1, B1) using 1-bit comparator
    OneBitComparator comparator1 (
        .A(A[1]),
        .B(B[1]),
        .A_greater_B(A1_greater_B1),
        .A_equal_B(A1_equal_B1),
        .A_less_B(A1_less_B1)
    );

    // Compare LSB (A0, B0) using 1-bit comparator
    OneBitComparator comparator0 (
        .A(A[0]),
        .B(B[0]),
        .A_greater_B(A0_greater_B0),
        .A_equal_B(A0_equal_B0),
        .A_less_B(A0_less_B0)
    );

    // A > B
    assign A_greater_B = A1_greater_B1 | (A1_equal_B1 & A0_greater_B0);
    
    // A < B
    assign A_less_B = A1_less_B1 | (A1_equal_B1 & A0_less_B0);

    // A == B
    assign A_equal_B = A1_equal_B1 & A0_equal_B0;
endmodule

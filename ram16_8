module ram16_8(din,dout,wr_addr,rd_addr,we,re,clk,rst);

 parameter width=8,depth=16,addr=4; //fix the memory value as parameter

input clk,rst,we,re;
input[width-1:0]din;
input[addr-1:0]wr_addr,rd_addr;
output reg [width-1:0]dout;

integer i;

//array declaration
reg[width-1:0]mem[depth-1:0];

always@(posedge clk)
    begin
        if(rst)
        begin
           dout<=0;
            for(i=0;i<16;i=i+1)
            mem[i]<=0;//clear all the bits in the register
        end
        else begin
            if(we==1)
                begin   
                    mem[wr_addr]<=din;
                 end
             if(re==1)
                begin
                    dout<=mem[rd_addr];
                 end
          end
     end
 endmodule
                    
 


test bench

module ram_tb();

parameter width=8,depth=16,addr=4; 
parameter cycle=10;
reg clk,rst,we,re;
reg[width-1:0]din;
reg[addr-1:0]wr_addr,rd_addr;
wire [width-1:0]dout;

//mapping
ram16_8 dut(.clk(clk),.rst(rst),.we(we),.re(re),.wr_addr(wr_addr),.rd_addr(rd_addr),.dout(dout),.din(din));

always
    begin   
        #(cycle/2);
        clk=1'b0;
        #(cycle/2);
        clk=~clk;
    end
    
 task initialize();
 begin
    din=8'd0;
    {rd_addr,wr_addr}=8'd0;
    {rst,we,re}=3'd0;
end
endtask
 
 task rst_din();
begin
    @(negedge clk)
        rst=1'b1;
    @(negedge clk)
        rst=1'b0;
end
endtask

task write(input we1,
            input [3:0]wr_addr1,
            input[7:0]din1);
@(negedge clk)
begin
    we=we1;
    wr_addr=wr_addr1;
    din=din1;
end
endtask

task read(input re1,
            input [3:0]rd_addr1);
@(negedge clk)
    begin
        re=re1;
        rd_addr=rd_addr1;
    end
endtask

initial 
    begin
        rst_din();
        write(1'b1,4'b0001,8'd8);
        #10;
        read(1'b1,4'b0001);
        #10;
        write(1'b1,4'b0011,8'd10);
        #10;
        read(1'b1,4'b0011);
        #100;
     end
endmodule
